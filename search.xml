<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DOM事件]]></title>
    <url>%2F2019%2F01%2F04%2FDOM%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[DOM事件类一、基本概念：DOM事件级别 DOM事件级别 DOM事件 描述 DOM0 element.onclick=function(){} DOM0时代制定的DOM事件标准 DOM2 element.addEventListener(‘click’,function(){ },false) ①DOM2时代制定的事件监听；②DOM1没有制定与事件相关的；③false,默认表示冒泡阶段触发，true表示捕获阶段 DOM3 element.addEventListener(‘keyup’,function(){ },false) DOM3在DOM2的基础上增加了一些鼠标键盘事件 二、DOM事件模型（冒泡、捕获） 事件冒泡：是由IE团队提出来的，即事件是由最具体的那个元素j接收，然后逐级向上传播 事件捕获： 事件捕获是由NetSpace团队提出来的，是由最上一级节点先接收事件，然后向下传播到具体的节点 三、DOM事件流“DOM2级事件”规定了事件l流包含3个阶段，事件捕获阶段，目标阶段和事件冒泡阶段。首先发生的事件捕获阶段，然后实际的目标接收到事件，最后阶段是冒泡阶段。 四、DOM事件捕获的具体流程window -&gt; document(文档对象) -&gt; html -&gt; body -&gt; div(具体目标元素) 备注：具体代码参考DOM事件捕获流程 五、DOM事件冒泡的具体流程div(具体目标元素) -&gt; body -&gt; html -&gt; document(文档对象) -&gt; window 备注：具体代码参考DOM事件冒泡流程 六、Event对象的具体应用 事件对象 描述 event.preventDefault() 阻止默认事件 event.stopPropagation() 阻止冒泡 event.currentTarget() 当前绑定事件对象的元素 event.target() 当前被点击的元素 七、自定义事件 自定义不带参数事件12345let ev = new Event('cat');document.addEventListener('cat',function() &#123; console.log('自定义不带参数事件');&#125;)document.dispatchEvent(ev); 自定义可以传参事件1234567let ev = new CustomEvent('dog',&#123; detail: &#123; a : '参数a'&#125;&#125;);document.addEventListener('dog',function(e) &#123; console.log('自定义事件参数为',e.detail);&#125;)document.dispatchEvent(ev); 备注：具体代码参考自定义事件]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两栏布局（左侧固定，右侧自适应）]]></title>
    <url>%2F2018%2F12%2F19%2F%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[css实现左侧宽度固定，右侧自适应布局的四种方法1. 左侧浮动，右侧生成BFC123456789&lt;div className = &#123; style['float-left-center'] &#125;&gt; &lt;div className=&#123; style.left &#125;&gt;&lt;/div&gt; &lt;div className=&#123; style.right &#125;&gt; &lt;p&gt;左侧浮动的两栏内容&lt;/p&gt; &lt;p&gt;左侧浮动的两栏内容&lt;/p&gt; &lt;p&gt;左侧浮动的两栏内容&lt;/p&gt; &lt;p&gt;左侧浮动的两栏内容&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; 1234567891011121314151617// 左侧浮动，右侧生成BFC.float-left-center &#123; margin: 5px 0; width: 100%; color: blue; .left &#123; float: left; width: 300px;; height: 100px; background: red; &#125; .right &#123; background: #eee; //height: 100px; overflow: auto; &#125;&#125; 2. flex布局实现12345678910&lt;div className=&#123; style['flex-left-center']&#125;&gt; &lt;div className=&#123; style.left &#125;&gt;&lt;/div&gt; &lt;div className=&#123; style.right &#125;&gt; &lt;p&gt;flex布局，左侧固定&lt;/p&gt; &lt;p&gt;flex布局，左侧固定&lt;/p&gt; &lt;p&gt;flex布局，左侧固定&lt;/p&gt; &lt;p&gt;flex布局，左侧固定&lt;/p&gt; &lt;p&gt;flex布局，左侧固定&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 1234567891011121314/*flex布局实现*/.flex-left-center &#123; display: flex; margin: 5px 0; .left &#123; width: 300px; height: 100px; background: red; &#125; .right&#123; flex: 1; background: #eee; &#125;&#125; 3. css3 网格布局12345678910&lt;div className=&#123; style[&apos;grid-left-center&apos;]&#125;&gt; &lt;div className=&#123; style.left &#125;&gt;&lt;/div&gt; &lt;div className=&#123; style.right &#125;&gt; &lt;p&gt;网格布局实现&lt;/p&gt; &lt;p&gt;网格布局实现&lt;/p&gt; &lt;p&gt;网格布局实现&lt;/p&gt; &lt;p&gt;网格布局实现&lt;/p&gt; &lt;p&gt;网格布局实现&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 1234567891011121314// 网格布局.grid-left-center &#123; margin: 5px 0; display: grid; grid-template-columns: 300px auto; grid-template-rows: 200px auto; .left &#123; background: red; &#125; .right &#123; background: #eee; &#125;&#125; 4. 绝对定位实现12345678910&lt;div className=&#123; style['absoulte-left-center']&#125;&gt; &lt;div className=&#123; style.left &#125;&gt;&lt;/div&gt; &lt;div className=&#123; style.right &#125;&gt; &lt;p&gt;绝对定位实现&lt;/p&gt; &lt;p&gt;绝对定位实现&lt;/p&gt; &lt;p&gt;绝对定位实现&lt;/p&gt; &lt;p&gt;绝对定位实现&lt;/p&gt; &lt;p&gt;绝对定位实现&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 1234567891011121314151617// 绝对定位实现.absoulte-left-center &#123; position: relative; margin: 5px 0; .left &#123; position: absolute; width: 300px; height: 100px; background: red; &#125; .right &#123; position: absolute; left: 300px; right: 0; background: #eee; &#125;&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
</search>
